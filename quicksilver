#!/usr/bin/python3

import requests
import json
import base64
import time
import os
import sys
import gui
import threading
import gi

gi.require_version('Gtk', '3.0')
from gi.repository import Gtk, GLib

from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

host = 'https://localhost:9090'

app_folder = os.environ['HOME'] + '/.config/quicksilver/'
priv_folder = app_folder + 'priv/'
pub_folder = app_folder + 'pub/'

def login(user, passwd):
    creds = json.dumps({
        'Username': user,
        'Password': passwd
    })

    res = requests.get(host + '/login', data=creds, verify=False)

    if res.status_code == 200:
        return res.text

    return False

def lookup_user(user):
    params = { 'user': user }
    res = requests.get(host + '/lookup', params=params, verify=False)

    if res.status_code == 200:
        print('')
        return res.text

    return 0

def unwrap_jwt(jwt):
    token = jwt.split('.')
    return json.loads(base64.urlsafe_b64decode(token[1]))

def send_message(msg, to, jwt):
    params = { 'to': to }
    headers = { 'Session': jwt }

    res = requests.post(host + '/send', data=msg, params=params, headers=headers, verify=False)

def get_messages(peer, since, jwt):
    params = { 'peer': peer }
    headers = { 'Session': jwt }

    if since != None:
        params['since'] = since

    res = requests.get(host + '/get', params=params, headers=headers, verify=False)

    return json.loads(res.text)

def poll_messages(peer_name, jwt, win):
    timestamp = None
    while True:
        messages = get_messages(peer_name, timestamp, jwt)
        if messages:
            for message in messages:
                author = message['Username' ]
                timestamp = message['Timestamp']
                msg = message['Message']
                GLib.idle_add( win.show_message, msg, author, timestamp)
        time.sleep(2)

def clean_exit(win):

    win.destroy()
    Gtk.main_quit()

if __name__ == '__main__':
    jwt = False
    session = False
    my_id = False
    my_name = False
    my_privkey = False
    peer_id = False
    peer_name = False
    peer_pubkey = False

    if os.system('stat ' + app_folder) != 0:
        os.system('mkdir -p ' + app_folder)

    win = gui.ChatWindow()
    win.connect('destroy', Gtk.main_quit)

    login_dialog = gui.LoginDialog(win)
    while not jwt:
        status = login_dialog.run()
        if status == Gtk.ResponseType.OK:
            user = login_dialog.user_entry.get_text()
            passwd = login_dialog.passwd_entry.get_text()

            jwt = login(user, passwd)

            if jwt:
                session = unwrap_jwt(jwt)
                my_id = session['Uid']
                my_name = user
                login_dialog.destroy()

                privkey = '%s%s%s' % (priv_folder, my_name, '.pem')
                pubkey = '%s%s%s' %  (pub_folder, my_name, '.pem')
                if os.system('stat ' + privkey) != 0:
                    os.system('mkdir -p ' + priv_folder)
                    os.system('mkdir -p ' + pub_folder)
                    os.system('openssl genrsa -out ' + privkey + ' 2048')
                    os.system('openssl rsa -in ' + privkey + ' -pubout -out ' + pubkey)

                fh = open(privkey, 'rb')
                my_privkey = fh.read()
                fh.close()
        else:
            sys.exit(0)

    peer_dialog = gui.PeerDialog(win)
    while not peer_id:
        status = peer_dialog.run()
        if status == Gtk.ResponseType.OK:
            user = peer_dialog.user_entry.get_text()

            peer_id = int(lookup_user(user))

            if peer_id:
                peer_name = user
                win.set_title('Chatting with %s' % peer_name)
                peer_dialog.destroy()

                pubkey = '%s%s%s' %  (pub_folder, peer_name, '.pem')
                if os.system('stat ' + pubkey) != 0:

                    fc = Gtk.FileChooserDialog()
                    fc.set_transient_for(win)
                    fc.set_modal(True)
                    fc.add_buttons(
                        'Open', Gtk.ResponseType.OK,
                        'Cancel', Gtk.ResponseType.CLOSE)
                    status = fc.run()
                    if status == Gtk.ResponseType.OK:
                        file = fc.get_filename()
                        os.system('mkdir -p ' + pub_folder)
                        os.system('cp ' + file + ' ' + pubkey)
                        fc.destroy()
                    else:
                        sys.exit(0)
        else:
            sys.exit(0)

    win.show_all()

    poller = threading.Thread(
        group = None,
        target = poll_messages,
        name = 'poller',
        args = (peer_name, jwt, win))
    poller.daemon = True
    poller.start()

    win.cb = lambda txt: send_message(txt, peer_name, jwt)

    Gtk.main()
